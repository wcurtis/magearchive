<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * @category   design_default
 * @package    Mage
 * @copyright  Copyright (c) 2004-2007 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>
<!-- Addresses list -->
<table cellspacing="0" class="form-edit">
<tr>
<td class="address-list">
    <div class="box-head-left">
        <h4 class="icon-head head-customer-address-list"><?=Mage::helper('customer')->__('Customer Addresses')?></h4>
        <div class="clear"></div>
        <?=$this->getAddNewButtonHtml()?>
    </div>
    <ul id="address_list">
    <?$_iterator = 0;?>
    <?if($addressCollection->getSize()):?>
        <?foreach ($addressCollection as $_address):?>
        <li id="address_item_<?=$_address->getId()?>">
            <a href="#" class="btn-remove-address">
                <img src="<?=$this->getSkinUrl('images/icon_remove_address.gif')?>" alt="Remove address" id="delete_button<?=++$_iterator?>" />
            </a>
            <a href="#" id="select_button" class="select_button btn-edit-address">
                <img src="<?=$this->getSkinUrl('images/icon_edit_address.gif')?>" alt="Edit address"/>
            </a>
            <address>
                <?=$_address->toString("{{firstname}} {{lastname}}<br/>{{street}}<br/>{{city}}, {{region}} {{postcode}}<br/>T: {{telephone}}")?>
            </address>
            <div class="address-type">
                <span class="address-type-line">
                    <input type="radio" value="<?=$_address->getId()?>" id="address_item_billing<?=$_address->getId()?>" name="account[default_billing]" title="<?=Mage::helper('customer')->__('Set as Default Billing Address')?>"<?if($_address->getId()==$customer->getDefaultBilling()):?> checked="true"<?endif;?>/>
                    &nbsp;<label for="address_item_billing<?=$_address->getId()?>"><?=Mage::helper('customer')->__('Default Billing Address')?></label>
                </span>
                <span class="address-type-line">
                    <input type="radio" value="<?=$_address->getId()?>" id="address_item_shipping<?=$_address->getId()?>" name="account[default_shipping]" title="<?=Mage::helper('customer')->__('Set as Default Shipping Address')?>"<?if($_address->getId()==$customer->getDefaultShipping()):?> checked="true"<?endif;?>/>
                    &nbsp;<label for="address_item_shipping<?=$_address->getId()?>"><?=Mage::helper('customer')->__('Default Shipping Address')?></label>
                </span>
            </div>
        </li>
        <?endforeach;?>
    <?endif;?>
    </ul>
</td>
<td>
<!-- Addresses forms -->
    <div class="entry-edit" id="address_form_container">
        <?if($addressCollection->getSize()):?>
            <?foreach ($addressCollection as $_address):?>
            <div id="form_address_item_<?=$_address->getId()?>" style="display:none">
            <?
                    $this->getFormObject()->setValues($_address->getData())
                            ->setHtmlIdPrefix($_address->getId())
                            ->setFieldNameSuffix('address['.$_address->getId().']')
            ?>
            <?=$this->getFormObject()->getHtml()?>
            <input type="hidden" name="address[<?=$_address->getId()?>][_deleted]" id="deleted_address_item_<?=$_address->getId()?>">
            </div>
            <?endforeach;?>
        <?else:?>
            <div id="no_address_message"><?=Mage::helper('customer')->__('This customer has no saved addresses.')?></div>
        <?endif;?>
    </div>


    <!-- Template for adding address item to list -->
    <?$_templatePrefix = $this->getTemplatePrefix()?>
    <div id="address_item_template" class="no-display template">
        <a href="#" class="btn-remove-address">
            <img src="<?=$this->getSkinUrl('images/icon_remove_address.gif')?>" alt="Remove address" id="delete_button<?=++$_iterator?>" />
        </a>
        <a href="#" id="select_button" class="btn-edit-address">
            <img src="<?=$this->getSkinUrl('images/icon_edit_address.gif')?>" alt="Edit address"/>
        </a>
        <address><?=Mage::helper('customer')->__('New Customer Address')?></address>
        <div class="address-type">
            <span class="address-type-line">
                <input type="radio" value="<?=$_templatePrefix?>" id="address_item_billing<?=$_templatePrefix?>" name="account[default_billing]" title="<?=Mage::helper('customer')->__('Set as Default Billing Address')?>"/>
                &nbsp;<label for="address_item_billing<?=$_templatePrefix?>"><?=Mage::helper('customer')->__('Default Billing Address')?></label>
            </span>
            <span class="address-type-line">
                <input type="radio" value="<?=$_templatePrefix?>" id="address_item_shipping<?=$_templatePrefix?>" name="account[default_shipping]" title="<?=Mage::helper('customer')->__('Set as Default Shipping Address')?>"/>
                &nbsp;<label for="address_item_shipping<?=$_templatePrefix?>"><?=Mage::helper('customer')->__('Default Shipping Address')?></label>
            </span>
        </div>
    </div>

    <!-- Address form template -->
    <div id="address_form_template" class="no-display template">
    <?
        // Set form template elements prefix
        $this->getFormObject()->setHtmlIdPrefix($_templatePrefix)
                ->setValues(array())
                ->setFieldNameSuffix('address['.$_templatePrefix.']');
    ?>
    <?=$this->getFormObject()->getHtml()?>
    <?=$this->getCancelButtonHtml()?>
    </div>


<!-- -->
<script type="text/javascript">
var deleteButtonId = <?=$_iterator?>;

var addressesModel = Class.create();
addressesModel.prototype = {
    initialize : function() {
        this.activeItem   = null;
        this.itemTemplate = $('address_item_template');
        this.formTemplate = $('address_form_template');
        this.itemContainer= $('address_list');
        this.formContainer= $('address_form_container');
        this.baseItemId   = 'new_item';
        this.itemContentTemplate = new Template('#{firstname} #{lastname}<br/>#{street0} #{street1}<br/>#{city}, #{region} #{postcode}<br/>T: #{telephone}');

        this.onNewAddressClick  = this.addNewAddress.bindAsEventListener(this);
        this.onItemMouseOver    = this.itemMouseOver.bindAsEventListener(this);
        this.onItemMouseOut     = this.itemMouseOut.bindAsEventListener(this);
        this.onItemMouseClick   = this.itemMouseClick.bindAsEventListener(this);
        this.onItemFormFieldChange = this.syncFormData.bindAsEventListener(this);

        this.loader = new varienLoader(true);
        this.regionsUrl = '<?=$this->getRegionsUrl()?>';

        this.reloadItemList(1);

        for(var i=0,n=this.itemList.length; i<n; i++){
            if(this.itemList[i].id){
                this.addItemObservers(this.itemList[i]);
                this.initItem(this.itemList[i]);
            }
        }
        if($('add_new_address_button')){
            Event.observe('add_new_address_button', 'click', this.onNewAddressClick)
        }

        this.setActiveItem(this.itemList[0]);
        this.setAddressAsDefault();
        this.bindCountryRegionRelation();
    },

    reloadItemList : function(initial){
        this.itemList = $$('#address_list li');
        if( initial ) {
            this.itemCount = this.itemList.length;
        }
        if(!this.itemList.length){
            if($('no_address_message')){
                $('no_address_message').show();
            }
            else {
                this.formContainer.innerHTML+= '<div id="no_address_message"><?=Mage::helper('customer')->__('This customer has no saved addresses.')?></div>'
            }
        }
    },

    initItem : function(item){
        if(item && $('form_'+item.id)){
            item.formBlock = $('form_'+item.id);
            Element.hide($('form_'+item.id));
            $('form_'+item.id).statusBar = item;
            $('form_'+item.id).addressItem = item;
        }
    },

    addItemObservers : function(item){
        if(item.id){
            Event.observe(item, 'mouseover', this.onItemMouseOver);
            Event.observe(item, 'mouseout', this.onItemMouseOut);
            Event.observe(item, 'click', this.onItemMouseClick);
        }
    },

    addNewAddress : function(event){
        if(this.canCreateNewAddress){
            this.itemCount++;
            if($('no_address_message')){
                $('no_address_message').hide();
            }

            // create new form elements
            var newForm = document.createElement('div');
            newForm.id = 'form_'+this.baseItemId+this.itemCount;
            newForm.innerHTML = this.prepareTemplate(this.formTemplate.innerHTML);
            this.formContainer.appendChild(newForm);

            $('_item'+this.itemCount+'firstname').value = $('_accountfirstname').value;
            $('_item'+this.itemCount+'lastname').value = $('_accountlastname').value;

            Element.hide(newForm);

            // create new item
            var newItem = document.createElement('li');
            newItem.isNewAddress = true; // set is new flag
            newItem.id = this.baseItemId+this.itemCount;

            deleteButtonId ++;
            var template = this.prepareTemplate(this.itemTemplate.innerHTML).replace('delete_button', 'delete_button'+ deleteButtonId);

            newItem.innerHTML = template;
            newItem.formBlock = newForm;
            this.itemContainer.appendChild(newItem);

            newForm.statusBar = newItem;
            newForm.addressItem = newItem;

            this.addItemObservers(newItem);
            this.setActiveItem(newItem);
            this.bindCountryRegionRelation(newForm.id);

            if( $('_item'+this.itemCount+'firstname').value ) this.syncFormData($('_item'+this.itemCount+'firstname'));
            if( $('_item'+this.itemCount+'lastname').value ) this.syncFormData($('_item'+this.itemCount+'lastname'));
        }
        this.reloadItemList();
        //Event.stop(event);
    },

    prepareTemplate : function(template){
        return template.replace(/<?=$_templatePrefix?>/g, '_item'+this.itemCount);
    },

    canCreateNewAddress : function(){
        return true;
    },

    itemMouseOver : function(event){
        var element = Event.findElement(event, 'li');
        Element.addClassName(element, 'over');
    },

    itemMouseOut : function(event){
        var element = Event.findElement(event, 'li');
        Element.removeClassName(element, 'over');
    },

    itemMouseClick : function(event){
        if (!Event) {
            return;
        }
        var element = Event.findElement(event, 'li'); // find top item
        var elem = Event.element(event); // exact element clicked

        if ( ((elem.tagName == 'A') && elem.id.match(/^delete_button([0-9]*?)$/)) || ((elem.tagName == 'IMG') && elem.id.match(/^delete_button([0-9]*?)$/)) ) {
            this.deleteAddress(element);
            Event.stop(event);
        }
        else if(elem.tagName == 'INPUT') {
            this.setAddressAsDefault(element);
        }
        else {
            this.setActiveItem(element);
        }
    },

    setAddressAsDefault : function(){
        for(var i=0; i<this.itemList.length;i++){
            if(this.itemList[i].id){
                var inputs = $(this.itemList[i].id).getElementsBySelector('input');
                var isActive = false;
                for(var j in inputs){
                    if(inputs[j].type=='radio' && inputs[j].checked && this.itemList.length > 1){
                        isActive = true;
                    }
                }
                this.toggleDeleteButton(this.itemList[i], !isActive);
            }
        }
    },

    toggleDeleteButton : function(item, flag){
        if(flag){
            $(item).getElementsByClassName('btn-remove-address').each(Element.show);
            $(item.formBlock).getElementsBySelector('.delete-address').each(Element.show);
        } else {
            $(item).getElementsByClassName('btn-remove-address').each(Element.hide);
            $(item.formBlock).getElementsBySelector('.delete-address').each(Element.hide);
        }
    },

    setActiveItem : function(item){
        if(this.activeItem){
            Element.removeClassName(this.activeItem, 'on');
            if($('form_'+this.activeItem.id)){
                Element.hide($('form_'+this.activeItem.id));
            }
        }
        Element.addClassName(item, 'on');

        if(item && $('form_'+item.id)){
            $('form_'+item.id).changeRelation = item;
            $('form_'+item.id).addressItem = item;
            Element.show($('form_'+item.id));
            //new Effect.Appear($('form_'+item.id), {duration : 0.3 });
            //$('form_'+item.id).focus();
            this.addFieldChangeObserver($('form_'+item.id));
        }

        this.activeItem = item;
    },

    getFormContainerFields : function(container){
        var fields = $$('#'+container.id+' input', '#'+container.id+' select', '#'+container.id+' textarea');
        return fields;
    },

    addFieldChangeObserver : function(container){
        var fields = this.getFormContainerFields(container);
        for(var i in fields){
            Event.observe(fields[i], 'change', this.onItemFormFieldChange);
        }

    },

    syncFormData : function(event){
        var container = false;
        if( event.isTrusted ) {
            var elm = Event.element(event);
        } else {
            var elm = event;
        }

        while(elm.tagName != 'BODY') {
            if(elm.addressItem){
                container = elm;
            }
            elm = elm.parentNode;
        }

        if(container){
            var data = {};
            var fields = this.getFormContainerFields(container);
            for(var i in fields){
                if(fields[i].id){
                    var id = fields[i].id.replace(/^(_item)?[0-9]+/, '');
                    var value = fields[i].getValue();
                    if(fields[i].tagName.toLowerCase()=='select'){
                        data[id] = fields[i].options[fields[i].selectedIndex].text;
                    }
                    else{
                        data[id] = value;
                    }
                }
            }
            var itemContainer = container.addressItem.getElementsBySelector('address');
            if(itemContainer[0]){
                itemContainer[0].innerHTML = this.itemContentTemplate.evaluate(data);
            }
        }
    },

    deleteAddress : function(item){
        if(confirm('<?=Mage::helper('customer')->__('Are you sure you want to delete this address?')?>')){
            if( item.isNewAddress){
                if ( this.activeItem == item ) this.formContainer.removeChild(item.formBlock);
            } else {
                if($('deleted_'+item.id)){
                    $('deleted_'+item.id).value = 1;
                    if(item.formBlock){
                        item.formBlock.addClassName('no-display template');
                    }
                }
            }

            if ( this.activeItem == item && item != this.itemList[0] ) this.setActiveItem(this.itemList[0]);
            if ( item == this.itemList[0] && (this.itemList[1]) ) this.setActiveItem(this.itemList[1]);

            this.itemContainer.removeChild(item);
            this.reloadItemList();
            this.setAddressAsDefault();
        }
    },

    cancelAdd : function(button){
        if(confirm('<?=Mage::helper('customer')->__('Are you sure you want to cancel adding of this address?')?>')){
            var item = $(this.baseItemId + button.id.replace(new RegExp('[a-z_]*',''), ''));

            if( item.isNewAddress){
                if ( this.activeItem == item ) this.formContainer.removeChild(item.formBlock);
            }
            if ( this.activeItem == item && item != this.itemList[0] ) this.setActiveItem(this.itemList[0]);
            if ( item == this.itemList[0] && (this.itemList[1]) ) this.setActiveItem(this.itemList[1]);

            this.itemContainer.removeChild(item);

            this.reloadItemList();
            this.setAddressAsDefault();
        }
    },

    bindCountryRegionRelation : function(paerntId){
        var countryElements = document.getElementsByClassName('countries');
        for(var i=0;i<=countryElements.length;i++){
            if(countryElements[i]){
                if(!countryElements[i].bindRegions || !countryElements[i].parentBindId || countryElements[i].parentBindId!=paerntId){
                    Event.observe(countryElements[i], 'change', this.reloadRegionField.bind(this));
                    countryElements[i].bindRegions = true;
                    countryElements[i].parentBindId = paerntId;
                }
            }
        }
    },

    reloadRegionField : function(event){
        var countryElement = Event.element(event);
        if(countryElement.id){
            var regionElement  = $(countryElement.id.replace(/country_id/, 'region'));
            if(regionElement){
                this.regionElement = regionElement;
                var url = this.regionsUrl+'parent/'+countryElement.value;
                this.loader.load(url, {}, this.refreshRegionField.bind(this));
            }
        }
    },

    refreshRegionField : function(serverResponse){
        if(serverResponse){
            var data = eval('(' + serverResponse + ')');
            var value = this.regionElement.value;
            var reqLabel = this.regionElement.parentNode.previous(0).getElementsByClassName('required');
            if (data.length) {
                var html = '<select name="'+this.regionElement.name+'" id="'+this.regionElement.id+'" class="required-entry select" title="'+this.regionElement.title+'">';
                html+= '<option value=""></option>';
                for (var i in data){
                    if(data[i].label) {
                        html+= '<option value="'+data[i].value+'"';
                        if(this.regionElement.value && (this.regionElement.value == data[i].value || this.regionElement.value == data[i].label)){
                            html+= ' selected';
                        }
                        html+='>'+data[i].label+'</option>';
                    }
                }
                html+= '</select>';
                if(reqLabel){
                    reqLabel.each(function(item){Element.show(item)});
                }
                new Insertion.Before(this.regionElement, html);
                Element.remove(this.regionElement);
            }
            else{
                var html = '<input type="text" name="'+this.regionElement.name+'" id="'+this.regionElement.id+'" class="input-text" title="'+this.regionElement.title+'">';
                if(reqLabel){
                    reqLabel.each(function(item){Element.hide(item)});
                }
                new Insertion.Before(this.regionElement, html);
                Element.remove(this.regionElement);
            }
        }
    }
}

customerAddresses = new addressesModel();
</script>
</td>
</tr></table>
