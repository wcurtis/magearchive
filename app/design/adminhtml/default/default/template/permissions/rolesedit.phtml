<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * @category   design_default
 * @package    Mage
 * @copyright  Copyright (c) 2004-2007 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>
<div class="entry-edit">
	<h4 class="icon-head head-edit-form fieldset-legend"><?=$this->__('Roles Resources')?></h4>
	<input type="hidden" name="resource" id="role_resources" value="">
	<fieldset id="role_resources">
		<div class="tree x-tree" id="tree-div"></div>
	</fieldset>
</div>
<!-- /////////////// TREE ////////////////////////////// -->
<script type="text/javascript">
Ext.EventManager.onDocumentReady(function() {
	var tree = new Ext.tree.TreePanel('tree-div', {
        animate:false,
        loader: false,
        enableDD:false,
        containerScroll: true,
		rootUIProvider: Ext.tree.CheckboxNodeUI,
		selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
		rootVisible: false
	});

	tree.on('check', checkHandler, tree);

	// set the root node
    var root = new Ext.tree.TreeNode({
        text: 'root',
        draggable:false,
        checked:'false',
        id:'__root__',
        uiProvider: Ext.tree.CheckboxNodeUI
    });

	tree.setRootNode(root);
	bildResourcesTree(root, <?=$this->getResTreeJson()?>);
    tree.addListener('click', resourceClick.createDelegate(this));

    // render the tree
    tree.render();
    root.expand();
    tree.expandAll();

    $('role_resources').value = tree.getChecked().join(',');
});

function resourceClick(node, e){
    node.getUI().check(!node.getUI().checked());
    varienElementMethods.setHasChanges(Event.element(e), e);
};

function bildResourcesTree(parent, config){
    if (!config) return null;

	if (parent && config && config.length){
        for (var i = 0; i < config.length; i++){
        	config[i].uiProvider = Ext.tree.CheckboxNodeUI;
            var node = new Ext.tree.TreeNode(config[i]);
            parent.appendChild(node);
            if(config[i].children){
                bildResourcesTree(node, config[i].children);
            }
        }
    }
}

function checkHandler(node)
{
	if ( node.attributes.checked && node.parentNode ) {
		var n = node.parentNode;
		this.removeListener('check', checkHandler);
		do {
			if (!n || n.attributes.id == 'admin' || n.attributes.id == '__root__') {
				break;
			} else {
				n.ui.check(true);
			}
		} while (n = n.parentNode );
		this.on('check', checkHandler);
	}
	if ( !node.isLeaf() && node.hasChildNodes() ) {
		this.removeListener('check', checkHandler);
		processChildren(node, node.attributes.checked);
		this.on('check', checkHandler);
	}
	$('role_resources').value = this.getChecked().join(',');
}

function processChildren(node, state)
{
	if ( !node.hasChildNodes() ) return false;
	for(var i = 0; i < node.childNodes.length; i++ ) {
		node.childNodes[i].ui.check(state);
		if ( node.childNodes[i].hasChildNodes() ) {
			processChildren(node.childNodes[i], state);
		}
	}
	return true;
}
</script>