<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * @category   design_default
 * @package    Mage
 * @copyright  Copyright (c) 2004-2007 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>
<?
/**
 * Attribute otions control
 *
 * @see Mage_Adminhtml_Block_Catalog_Product_Attribute_Edit_Tab_Options
 */
?>
<div>
<ul class="messages">
    <li class="notice-msg">
        <ul>
            <li><?=Mage::helper('catalog')->__('If you do not specify an option value for a store then the default value will be used.')?></li>
        </ul>
    </li>
</ul>
</div>

<div class="entity-edit">
    <div>
    <h4 class="icon-head head-edit-form fieldset-legend"><?=Mage::helper('catalog')->__('Manage Titles (Size, Color, etc.)')?></h4>
    <div class="box" style="padding:10px">
        <table class="dynamic-grid" cellspacing="0" id="attribute-labels-table">
            <tr>
            <?foreach ($this->getStores() as $_store):?>
                <th><?=$_store->getName()?></th>
            <?endforeach;?>
            </tr>
            <tr>
                <?$_labels = $this->getLabelValues()?>
                <?foreach ($this->getStores() as $_store):?>
                <td>
                    <input class="input-text<?if($_store->getId()==0):?> required-option<?endif;?>" type="text" name="frontend_label[<?=$_store->getId()?>]" value="<?=$_labels[$_store->getId()]?>"/>
                </td>
                <?endforeach;?>
            </tr>
        </table>
    </div>
    </div>
</div>
<br/>
<div class="entity-edit" id="matage-options-panel">
    <h4 class="icon-head head-edit-form fieldset-legend"><?=Mage::helper('catalog')->__('Manage Options (values of your attribute)')?></h4>
    <div class="box" style="padding:10px">
        <table class="dynamic-grid" cellspacing="0" id="attribute-options-table"  cellpadding="0" style="width:">
            <tr>
            <?foreach ($this->getStores() as $_store):?>
                <th><?=$_store->getName()?></th>
            <?endforeach;?>
                <th><?=Mage::helper('catalog')->__('Position')?></th>
                <th><?=$this->getAddNewButtonHtml()?></th>
            </tr>
        </table>

        <div class="no-display template" id="row-template">
        <table class="dynamic-grid" cellspacing="0">
    	    <tr>
                <?foreach ($this->getStores() as $_store):?>
                <td><input name="option[value][{{id}}][<?=$_store->getId()?>]" value="{{store<?=$_store->getId()?>}}" class="input-text<?if($_store->getId()==0):?> required-option<?endif;?>" type="text"/></td>
                <?endforeach;?>
                <td><input class="input-text" type="text" name="option[order][{{id}}]" value="{{sort_order}}"></td>
                <td class="a-left">
                    <input type="hidden" class="delete-flag" name="option[delete][{{id}}]" value="">
                    <?=$this->getDeleteButtonHtml()?>
                </td>
            </tr>
        </table>
        </div>
    </div>
</div>
<script type="text/javascript">
// IE removes quotes from element.innerHTML whenever it thinks they're not needed, which breaks html.
var templateText =
    '<table class="dynamic-grid" cellspacing="0">'+
        '<tr>'+
<?foreach ($this->getStores() as $_store):?>
            '<td><input name="option[value][{{id}}][<?=$_store->getId()?>]" value="{{store<?=$_store->getId()?>}}" class="input-text<?if($_store->getId()==0):?> required-option<?endif;?>" type="text"/></td>'+
<?endforeach;?>
            '<td><input class="input-text" type="text" name="option[order][{{id}}]" value="{{sort_order}}"></td>'+
            '<td class="a-left">'+
                '<input type="hidden" class="delete-flag" name="option[delete][{{id}}]" value="">'+
                '<?=$this->getDeleteButtonHtml()?>'+
            '</td>'+
        '</tr>'+
    '</table>';

var attributeOption = {
    table : $('attribute-options-table'),
    templateSyntax : /(^|.|\r|\n)({{(\w+)}})/,
    templateText : templateText,
    itemCount : 0,
    add : function(data) {
        this.template = new Template(this.templateText, this.templateSyntax);
        if(!data.id){
    		data = {};
    		data.id  = 'option_'+this.itemCount;
        }
        new Insertion.After(
				this.table,
				this.template.evaluate(data)
			);
        this.bindRemoveButtons();
        this.itemCount++;
    },
    remove : function(event){
        var element = $(Event.findElement(event, 'table')); // !!! Button already
                                                               // have table parent in safari
        // Safari workaround
        element.ancestors().each(function(parentItem){
           if (parentItem.hasClassName('dynamic-grid')) {
               element = parentItem;
               throw $break;
           } else if (parentItem.hasClassName('box')) {
               throw $break;
           }
        });


        if(element){
            var elementFlags = element.getElementsByClassName('delete-flag');
            if(elementFlags[0]){
                elementFlags[0].value=1;
            }

            element.addClassName('no-display');
            element.addClassName('template');
            element.hide();
        }
    },
    bindRemoveButtons : function(){
        var buttons = $$('.delete-option');
        for(var i=0;i<buttons.length;i++){
            if(!$(buttons[i]).binded){
                $(buttons[i]).binded = true;
                Event.observe(buttons[i], 'click', this.remove.bind(this));
            }
        }
    },
    /** Fix resizing of columns **/
    syncTableSize: function() {
        if (!this.sizeSyncFlag) {
            var row = this.findFirstRow();
            if (row) {
                var headers = this.table.getElementsBySelector('tr th');
                var cells   = row.getElementsBySelector('tr td');
                var tableSize = row.getDimensions().width;
                var cellSizeSum = 0;
                var dimensionsCell = [];
                var dimensionsHeader = [];
                if(tableSize) {
                    var i;
                    for (i=0; i<headers.size(); i++) {
                        dimensionsCell.push($(cells[i]).getDimensions());
                        dimensionsHeader.push($(headers[i]).getDimensions());
                        if(dimensionsHeader[i].width > dimensionsCell[i].width) {
                            tableSize +=  (dimensionsHeader[i].width - dimensionsCell[i].width);
                        }
                    }

                    for (i=0; i<headers.size(); i++) {
                        if(dimensionsHeader[i].width <= dimensionsCell[i].width) {
                            headers[i].style.width = Math.round(dimensionsCell[i].width/tableSize*1000)/10 + '%';
                        } else {
                            headers[i].style.width = Math.round(dimensionsHeader[i].width/tableSize*1000)/10 + '%';
                        }
                    }

                    this.table.style.width = tableSize + 'px';
                    this.sizeSyncFlag = true;
                    if(this.intervalIdentifier) {
                        clearInterval(this.intervalIdentifier);
                    }
                }
            }
        }
    },
    findFirstRow: function () {
        return (this.table.nextSiblings().size() ? this.table.nextSiblings()[0] : false);
    }
}
if($('row-template')){
    $('row-template').remove();
}
attributeOption.bindRemoveButtons();

if($('add_new_option_button')){
    Event.observe('add_new_option_button', 'click', attributeOption.add.bind(attributeOption));
}
Validation.addAllThese([
    ['required-option', '<?=Mage::helper('catalog')->__('Failed')?>', function(v) {
        return !Validation.get('IsEmpty').test(v);
}]]);
<?foreach ($this->getOptionValues() as $_value):?>
    attributeOption.add(<?=$_value->toJson()?>);
<?endforeach;?>
attributeOption.intervalIdentifier = setInterval(
    attributeOption.syncTableSize.bind(attributeOption),
    3000
);
</script>